steps:
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection - OSS Compliance'
  inputs:
    ignoreDirectories: '$(Build.SourcesDirectory)/tests'

- powershell: |
   Write-Host "##vso[task.setvariable variable=SignType;isOutput=true]real"
  name: setSignTypeVariable
  displayName: 'Set sign binary variable'
  condition: >
   and(in(variables['Build.Reason'], 'Schedule', 'Manual'), eq(variables['Build.DefinitionName'], 'Oryx-CI'), 
   or(startsWith(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'],'refs/heads/kichalla/' )))

- script: |
    echo $(setSignTypeVariable.SignType)
  name: SignType

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.6.2'
  inputs:
    versionSpec: 4.6.2
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
  displayName: 'Install Signing Plugin'
  inputs:
    signType: '$(setSignTypeVariable.SignType)'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: Oryx.sln
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

####################################################
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '2.1.805'

- powershell: |
    $env:GIT_COMMIT=$(git rev-parse HEAD)
    $env:BUILD_NUMBER=$env:BUILD_BUILDNUMBER
    dotnet build -c $(BuildConfiguration) src\BuildScriptGenerator\BuildScriptGenerator.csproj
  displayName: 'Build Oryx BuildScriptGenerator'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- powershell: |
    dotnet restore src/BuildScriptGenerator/sign.proj
  displayName: 'Restore BuildScriptGenerator/sign.proj'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: VSBuild@1
  displayName: 'Sign Oryx BuildScriptGenerator Binaries'
  inputs:
    solution: 'src/BuildScriptGenerator/sign.proj'
    msbuildArgs: '/t:SignFiles /p:MicroBuild_SigningEnabled=true'
    configuration: '$(BuildConfiguration)'
    condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- powershell: |
    $packagesDir="$(Build.ArtifactStagingDirectory)\packages"
    mkdir -Force "$packagesDir"
    dotnet new globaljson --sdk-version 2.1.805
    dotnet pack src\BuildScriptGenerator\BuildScriptGenerator.csproj `
      --verbosity normal `
      -c $(BuildConfiguration) `
      --no-build `
      --include-symbols `
      --include-source `
      -p:IsBeingPacked=true
    Copy-Item `
      -Path src\BuildScriptGenerator\bin\$(BuildConfiguration)\*.nupkg `
      -Destination "$packagesDir"
    del global.json
  displayName: 'Create BuildScriptGenerator nuget package'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- powershell: |
    $env:GIT_COMMIT=$(git rev-parse HEAD)
    $env:BUILD_NUMBER=$env:BUILD_BUILDNUMBER
    dotnet build -c $(BuildConfiguration) src\BuildScriptGeneratorCli\BuildScriptGeneratorCli.csproj
  displayName: 'Build Oryx BuildScriptGenerator CLI'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- powershell: |
    dotnet restore src/BuildScriptGeneratorCli/sign.proj
  displayName: 'Restore BuildScriptGeneratorCli/sign.proj'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: VSBuild@1
  displayName: 'Sign Oryx BuildScriptGenerator CLI Binaries'
  inputs:
    solution: 'src/BuildScriptGeneratorCli/sign.proj'
    msbuildArgs: '/t:SignFiles /p:MicroBuild_SigningEnabled=true'
    configuration: '$(BuildConfiguration)'
    condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- powershell: |
    dotnet new globaljson --sdk-version 2.1.805
    dotnet pack src\BuildScriptGeneratorCli\BuildScriptGeneratorCli.csproj `
      -c $(BuildConfiguration) `
      --no-build `
      --include-symbols `
      --include-source `
      -p:IsBeingPacked=true
    Copy-Item `
      -Path src\BuildScriptGeneratorCli\bin\$(BuildConfiguration)\*.nupkg `
      -Destination $(Build.ArtifactStagingDirectory)\packages
    del global.json
  displayName: 'Create BuildScriptGenerator CLI nuget package'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))
####################################################  

- powershell: |
    Write-Host "Setting up git_commit and build_number as env variable"
    $env:GIT_COMMIT=$(git rev-parse HEAD)
    $env:BUILD_NUMBER=$env:BUILD_BUILDNUMBER
    dotnet publish -r linux-x64 -c Release src\BuildScriptGeneratorCLI\BuildScriptGeneratorCli.csproj
  displayName: 'dotnet publish and after setting git_commit and build_number as env variable'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))
  
- task: VSBuild@1
  displayName: 'Sign Oryx Binaries'
  inputs:
    solution: 'src/BuildScriptGeneratorCli/Oryx_sign.signproj'
    msbuildArgs: '/t:SignFiles /p:RuntimeIdentifier=linux-x64 /p:MicroBuild_SigningEnabled=true'
    configuration: '$(BuildConfiguration)'
    condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: ArchiveFiles@2
  displayName: 'Create compressed file of Oryx binaries'
  inputs:
    rootFolderOrFile: 'src\BuildScriptGeneratorCli\bin\$(BuildConfiguration)\linux-x64\publish'
    includeRootFolder: false
    archiveType: tar
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)/oryx_linux_x64.tar.gz'
    replaceExistingArchive: true
    verbose: true
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)/binaries'
  inputs:
    SourceFolder: 'src/BuildScriptGeneratorCli/bin/$(BuildConfiguration)/linux-x64/publish'
    Contents: '**\*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/binaries'
    CleanTargetFolder: true
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifact'
  inputs:
    artifactName: 'signed_binaries'
    targetPath: '$(Build.ArtifactStagingDirectory)'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))