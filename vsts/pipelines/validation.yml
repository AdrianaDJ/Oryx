queue:
  name: OryxLinux

trigger: none

steps:
- checkout: self
  clean: true

- task: ShellScript@2
  displayName: 'Build Oryx.sln'
  inputs:
    scriptPath: ./build/build-solution.sh

- task: ShellScript@2
  displayName: 'Build build images'
  inputs:
    scriptPath: ./build/build-buildimages.sh

- task: ShellScript@2
  displayName: 'Build runtime images'
  inputs:
    scriptPath: ./build/build-runtimeimages.sh

- task: ShellScript@2
  displayName: 'Test script generator'
  inputs:
    scriptPath: ./build/test-scriptgenerator.sh

- task: ShellScript@2
  displayName: 'Test build images'
  inputs:
    scriptPath: ./build/test-buildimages.sh
    args: skipBuildingImages

- task: ShellScript@2
  displayName: 'Test runtime images'
  inputs:
    scriptPath: ./build/test-runtimeimages.sh
    args: skipBuildingImages

- task: ShellScript@2
  displayName: 'Remove containers created by tests'
  inputs:
    scriptPath: ./vsts/scripts/removeContainers.sh
    condition: always()

- task: CopyFiles@2
  displayName: 'Copy source projects output to artifacts folder'
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    contents: 'src/**/bin/**/*.*'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    overWrite: true
    flattenFolders: true

- task: CopyFiles@2
  displayName: 'Copy artifacts from source repo to agent artifacts folder'
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/artifacts'
    contents: '**/*.*'
    targetFolder: $(Build.ArtifactStagingDirectory)
    overWrite: true

- task: PublishTestResults@2
  inputs:
    testRunner: 'xUnit'
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/testResults/*.xml'
    mergeTestResults: true

- task: ArchiveFiles@2
  displayName: 'Archive docker files and scripts for Oryx build and runtime images'
  inputs:
    rootFolderOrFile: images
    archiveFile: '$(Build.ArtifactStagingDirectory)/images/dockerFiles.zip'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'


