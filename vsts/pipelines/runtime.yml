queue:
  name: OryxLinux
steps:
- checkout: self
  clean: true

- task: ShellScript@2
  displayName: 'Build Oryx.sln'
  inputs:
    scriptPath: ./build/build-solution.sh

- task: ShellScript@2
  displayName: 'Build runtime images'
  inputs:
    scriptPath: ./build/build-runtimeimages.sh

- task: ShellScript@2
  displayName: 'Test runtime images'
  inputs:
    scriptPath: ./build/test-runtimeimages.sh
    args: skipBuildingImages

- task: CopyFiles@2
  displayName: 'Copy source projects output to artifacts folder'
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    contents: 'src/**/bin/**/*.*'
    targetFolder: $(Build.ArtifactStagingDirectory)
    cleanTargetFolder: true
    overWrite: true
    flattenFolders: true

- task: CopyFiles@2
  displayName: 'Copy artifacts from source repo to agent artifacts folder'
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)/artifacts'
    contents: '**/*.*'
    targetFolder: $(Build.ArtifactStagingDirectory)
    overWrite: true

- task: PublishTestResults@2
  inputs:
    testRunner: 'xUnit'
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/testResults/*.xml'
    mergeTestResults: true

- task: Docker@0
  displayName: 'Push runtime images'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerRegistryConnection: oryx
    action: 'Push images'
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/images/runtime-images.txt'
    includeLatestTag: false

- task: ArchiveFiles@2
  displayName: 'Archive docker files and scripts for Oryx build and runtime images'
  inputs:
    rootFolderOrFile: images
    archiveFile: '$(Build.ArtifactStagingDirectory)/images/dockerFiles.zip'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'