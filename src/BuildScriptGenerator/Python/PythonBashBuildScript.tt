<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#!/bin/bash
set -e

SOURCE_DIR=$1
DESTINATION_DIR=$2

if [ ! -d "$SOURCE_DIR" ]; then
    echo "Source directory '$SOURCE_DIR' does not exist." 1>&2
    exit 1
fi

if [ -z "$DESTINATION_DIR" ]
then
    DESTINATION_DIR="$SOURCE_DIR"
fi

# Get full file paths to source and destination directories
cd $SOURCE_DIR
SOURCE_DIR=$(pwd -P)

if [ -d "$DESTINATION_DIR" ]
then
    cd $DESTINATION_DIR
    DESTINATION_DIR=$(pwd -P)
fi

echo "Source directory     : $SOURCE_DIR"
echo "Destination directory: $DESTINATION_DIR"

source /usr/local/bin/benv <#= BenvArgs #>
<#
	if (!string.IsNullOrWhiteSpace(PreBuildScriptPath)) {
#>

echo "Executing pre-build script ..."
chmod +x "<#= PreBuildScriptPath #>"
"<#= PreBuildScriptPath #>"
<#
	}
#>

echo "Python Version: $python"
cd "$SOURCE_DIR"

<#
	if (!string.IsNullOrWhiteSpace(VirtualEnvironmentName)) {
#>
VIRTUALENVIRONMENTNAME=<#= VirtualEnvironmentName #>
VIRTUALENVIRONMENTMODULE=<#= VirtualEnvironmentModule #>
VIRTUALENVIRONMENTOPTIONS=<#= VirtualEnvironmentParameters #>

echo "Python Virtual Environment: $VIRTUALENVIRONMENTNAME"

echo Creating virtual environment ...
$python -m $VIRTUALENVIRONMENTMODULE $VIRTUALENVIRONMENTNAME $VIRTUALENVIRONMENTOPTIONS

echo Activating virtual environment ...
source $VIRTUALENVIRONMENTNAME/bin/activate

pip install --upgrade pip
pip install --prefer-binary -r requirements.txt

# For virtual environment, we use the actual 'python' alias that as setup by the venv,
python_bin=python
<#
	}
	else {
#>
$pip install --prefer-binary -r requirements.txt --target="<#= PackagesDirectory #>" --upgrade
# We need to use the python binary selected by benv
python_bin=$python

# Detect the location of the site-packages to add the .pth file
SITE_PACKAGES_PATH=$($python -c "import site; print(site.getsitepackages()[0])")
# To make sure the packages are available later, e.g. for collect static or post-build hooks, we add a .pth poiting to them
APP_PACKAGES_PATH=$(pwd)"/<#= PackagesDirectory #>"
echo $APP_PACKAGES_PATH > $SITE_PACKAGES_PATH"/oryx.pth"

<#
	}
#>
echo
echo pip install finished.

if [ -e "$SOURCE_DIR/manage.py" ]
then
	if grep -iq "Django" "$SOURCE_DIR/requirements.txt"
	then
		echo
		echo Content in source directory is a Django app
		echo Running 'collectstatic' ...
		$python_bin manage.py collectstatic --noinput || EXIT_CODE=$? && true ; 
		echo "'collectstatic' exited with exit code $EXIT_CODE."
	fi
fi

if [ "$SOURCE_DIR" != "$DESTINATION_DIR" ]
then
	if [ -d "$DESTINATION_DIR" ]
	then
		echo
		echo Destination directory already exists. Deleting it ...
		rm -rf "$DESTINATION_DIR"
	fi

	appTempDir=`mktemp -d`
	cd "$SOURCE_DIR"
	# Use temporary directory in case the destination directory is a subfolder of $SOURCE
	cp -rf . "$appTempDir"
	mkdir -p "$DESTINATION_DIR"
	cd "$appTempDir"
	echo "Copying files to destination, '$DESTINATION_DIR'"
	cp -rf . "$DESTINATION_DIR"
fi
<#
	if (!string.IsNullOrWhiteSpace(PostBuildScriptPath)) {
#>

echo
echo "Executing post-build script ..."
chmod +x "<#= PostBuildScriptPath #>"
"<#= PostBuildScriptPath #>"
<#
	}
#>

echo
echo Done.